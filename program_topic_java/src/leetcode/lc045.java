package leetcode;

/*
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
你的目标是使用最少的跳跃次数到达数组的最后一个位置。
假设你总是可以到达数组的最后一个位置。

示例 1:
输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳1步，然后跳3步到达数组的最后一个位置。

示例 2:
输入: [2,3,0,1,4]
输出: 2

提示:
1 <= nums.length <= 1000
0 <= nums[i] <= 105
 */
public class lc045 {
    /*
        方法一：反向查找出发位置
        目标是到达数组的最后一个位置，因此可以考虑最后一步跳跃前所在的位置，该位置通过跳跃能够到达最后一个位置。
        如果有多个位置通过跳跃都能够到达最后一个位置，那么应该如何进行选择呢？直观上来看，可以「贪心」地选择距离最后一个位置最远的那个位置，
        也就是对应下标最小的那个位置。因此，我们可以从左到右遍历数组，选择第一个满足要求的位置。
        找到最后一步跳跃前所在的位置之后，继续贪心地寻找倒数第二步跳跃前所在的位置，以此类推，直到找到数组的开始位置。

        时间复杂度：O(n^2)，其中n是数组长度。有两层嵌套循环，在最坏的情况下，例如数组中的所有元素都是1，position需要遍历数组中的每个位置，对于position的每个值都有一次循环。
        空间复杂度：O(1)。
     */
    public int jump(int[] nums) {
        int position = nums.length - 1;
        int steps = 0;
        while (position > 0) {
            for (int i = 0; i < position; ++i) {
                if (i + nums[i] >= position) {
                    position = i;
                    steps++;
                    break;
                }
            }
        }

        return steps;
    }

    /*
        方法二：正向查找可到达的最大位置
        维护当前能够到达的最大下标位置，记为边界。从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加1。
        在遍历数组时，不访问最后一个元素，这是因为在访问最后一个元素之前，边界一定大于等于最后一个位置，否则就无法跳到最后一个位置了。
        如果访问最后一个元素，在边界正好为最后一个位置的情况下，会增加一次「不必要的跳跃次数」，因此不必访问最后一个元素。
        时间复杂度：O(n)，其中n是数组长度。
        空间复杂度：O(1)。
     */
    public int jump2(int[] nums) {
        int n = nums.length;
        int step = 0;
        int curReach = 0;
        int maxReach = 0;
        for (int i = 0; i < n - 1; ++i) {
            maxReach = Math.max(maxReach, i + nums[i]);
            if (curReach == i) {
                ++step;
                curReach = maxReach;
            }
        }

        return step;
    }
}
