package leetcode;

/**
 * 给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。
 * 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。
 *
 * 你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。
 *
 * 示例 1：
 * 输入：nums = [1,2,1,3,2,5]
 * 输出：[3,5]
 * 解释：[5, 3] 也是有效的答案。
 *
 * 示例 2：
 * 输入：nums = [-1,0]
 * 输出：[-1,0]
 *
 * 示例 3：
 * 输入：nums = [0,1]
 * 输出：[1,0]
 *
 * 提示：
 * 2 <= nums.length <= 3 * 104
 * -231 <= nums[i] <= 231 - 1
 * 除两个只出现一次的整数外，nums 中的其他数字都出现两次
 */
public class lc260 {
    /**
     * 对数组中的数字进行 异或 运算，那么最后的结果一定是只出现一次的两个数字的异或运算结果。
     *
     * 假设只出现一次的两个数是 x 和 y 那么最后的结果是x ^ y：
     *
     * 因为x、 y 是不相同的，所以他们肯定在二进制有不同的1值；
     * 可以使用 （x ^ y） & (- x ^ y) 得到最低的那一位1:
     * 根据该位置是否为1，将数组中的数字分成两组；
     * 对这两组分别做异或运算，就可得到只出现一次的两个值
     */
    public int[] singleNumber(int[] nums) {
        int diff = 0;

        for (int num : nums) {
            diff ^= num;
        }

        // 得到最低位的1
        int group = diff & (-diff);

        int[] res = new int[2];
        for (int num : nums) {
            // 分组位为0
            if ((group & num) == 0) {
                res[0] ^= num;
            } else {
                // 分组位为1
                res[1] ^= num;
            }
        }

        return res;
    }
}
